1.iterator (迭代器)
    设计的时候要松耦合(降低依赖性),使得部件之间相对独立,说白了就是不要体现具体数据类型，
而是用一种使用者不需要用关心的方式来访问或者迭代数据.
2.Adapter  (适配器)
    继承式:继承初始的类,然后原来的重写方法,这样可以在不改变原有类的情况下,增加新的功能。
    组合式:把初始的类作为一个属性,然后在新的类中调用初始类的方法,这样也可以在不改变原有
类的情况下,增加新的功能.
3.Template Method (模板方法)
    父类实现部分肯定的方法和其他需要的抽象方法,将具体处理交给子类.这样子可以证核心算法
的一致性和减少代码的冗余度.<子类实现抽象方法，不重写模板方法>
4.Factory Method (工厂方法)
    抽象的父类和父类相互决定实例的生成方式,但不决定所要生成的具体的类,子类自由的决定自己
要生成的类.
5.Singleton (单例)
    私有化构造函数,到那时提供一个get它的静态方法,这样就可以保证这个实例的唯一性.
6.Prototype (原型)
    通过克隆来创建对象,而不是通过new来创建对象,这样可以减少对象的创建,提高性能.
